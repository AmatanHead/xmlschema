API Documentation
=================

Module level API
----------------

.. function:: validate(xml_document, schema=None, cls=None, use_defaults=True)

    Validates an XML document against a schema instance. This function builds an
    :class:`XMLSchema` object for validating the XML document. Raises an
    :exc:`XMLSchemaValidationError` if the XML document is not validated against
    the schema.

    *xml_document* can be a file-like object or a string containing the XML data
    or a file path or an URI of a resource or an ElementTree/Element instance.
    *schema* can be a file-like object or a file path or an URI of a resource or
    a string containing the schema. *cls* is the schema class to use for building
    the instance (default is :class:`XMLSchema`). *use_defaults* defines when to
    use elements and attribute defaults for filling missing required values.

.. function:: to_dict(xml_document, schema=None, cls=None, path=None, \
              process_namespaces=True, **kwargs)

    Decodes an XML document to a Python's nested dictionary. The decoding is based
    on an XML Schema class instance. For default the document is validated during
    the decode phase. Raises an :exc:`XMLSchemaValidationError` if the XML document
    is not validated against the schema.

    *xml_document* can be a file-like object or a string containing the XML data
    or a file path or an URI of a resource or an ElementTree/Element instance.
    *schema* can be a file-like object or a file path or an URI of a resource or
    a string containing the schema. *cls* is the schema class to use for building
    the instance (default is :class:`XMLSchema`). *path* is an optional XPath
    expression that matches the subelement of the document that have to be decoded.
    The XPath expression considers the schema as the root element with global elements
    as its children.
    *process_namespaces* indicates whether to get the namespaces from the XML
    document and use them in the decoding process. With *kwargs* you can provide
    the optional arguments of :meth:`XMLSchema.iter_decode` as keyword arguments
    to variate the decoding process.


Schema level API
----------------

.. class:: xmlschema.XMLSchema_v1_0

    The class for XSD v1.0 schema instances. It's generated by the meta-class :class:`XMLSchemaMeta`
    and takes the same API of :class:`XMLSchemaBase`.

.. autoclass:: xmlschema.XMLSchema

.. autoclass:: xmlschema.XMLSchemaBase

    .. autoattribute:: id
    .. autoattribute:: version
    .. autoattribute:: attribute_form_default
    .. autoattribute:: element_form_default
    .. autoattribute:: block_default
    .. autoattribute:: schema_location
    .. autoattribute:: no_namespace_schema_location
    .. autoattribute:: target_prefix
    .. autoattribute:: base_url
    .. autoattribute:: parent_map

    .. automethod:: get_locations
    .. automethod:: include_schema
    .. automethod:: import_schema
    .. automethod:: create_schema

    .. automethod:: check_schema
    .. automethod:: build
    .. autoattribute:: built
    .. autoattribute:: validation_attempted
    .. autoattribute:: validity
    .. autoattribute:: all_errors
    .. automethod:: iter_components
    .. automethod:: iter_globals

    .. automethod:: validate
    .. automethod:: is_valid
    .. automethod:: decode
    .. automethod:: get_converter

    .. autoattribute:: to_dict
        :annotate: = An alias for :classmethod:`decode`.

    .. automethod:: iter
    .. automethod:: iterchildren
    .. automethod:: find
    .. automethod:: findall
    .. automethod:: iterfind


XSD globals maps API
--------------------

.. autoclass:: xmlschema.XsdGlobals
    :members: copy, register, iter_schemas, iter_globals, clear, build

XML Schema converters
---------------------

The base class `XMLSchemaConverter` is used for defining generic converters.
The subclasses implement some of the most used conventions for converting XML
to JSON data.

.. autoclass:: xmlschema.converters.XMLSchemaConverter
    :members: element_decode

.. class:: xmlschema.converters.ParkerConverter

    Converter class for Parker convention.

.. class:: xmlschema.converters.BadgerFishConverter

    Converter class for Badgerfish convention.

.. class:: xmlschema.converters.AbderaConverter

    Converter class for Abdera convention.

.. class:: xmlschema.converters.JsonMLConverter

    Converter class for JsonML convention.


Errors and exceptions
---------------------

.. autoexception:: xmlschema.XMLSchemaException

.. autoexception:: xmlschema.XMLSchemaNotBuiltError

.. autoexception:: xmlschema.XMLSchemaParseError

.. autoexception:: xmlschema.XMLSchemaRegexError

.. autoexception:: xmlschema.XMLSchemaXPathError

.. autoexception:: xmlschema.XMLSchemaValidationError

.. autoexception:: xmlschema.XMLSchemaChildrenValidationError

.. autoexception:: xmlschema.XMLSchemaDecodeError

.. autoexception:: xmlschema.XMLSchemaEncodeError
